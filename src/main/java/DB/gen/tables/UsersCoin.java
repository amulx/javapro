/*
 * This file is generated by jOOQ.
 */
package DB.gen.tables;


import DB.gen.ImoocShop;
import DB.gen.Indexes;
import DB.gen.Keys;
import DB.gen.tables.records.UsersCoinRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersCoin extends TableImpl<UsersCoinRecord> {

    private static final long serialVersionUID = -943972334;

    /**
     * The reference instance of <code>imooc_shop.users_coin</code>
     */
    public static final UsersCoin USERS_COIN = new UsersCoin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersCoinRecord> getRecordType() {
        return UsersCoinRecord.class;
    }

    /**
     * The column <code>imooc_shop.users_coin.user_name</code>.
     */
    public final TableField<UsersCoinRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * The column <code>imooc_shop.users_coin.coin</code>.
     */
    public final TableField<UsersCoinRecord, Integer> COIN = createField("coin", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>imooc_shop.users_coin</code> table reference
     */
    public UsersCoin() {
        this(DSL.name("users_coin"), null);
    }

    /**
     * Create an aliased <code>imooc_shop.users_coin</code> table reference
     */
    public UsersCoin(String alias) {
        this(DSL.name(alias), USERS_COIN);
    }

    /**
     * Create an aliased <code>imooc_shop.users_coin</code> table reference
     */
    public UsersCoin(Name alias) {
        this(alias, USERS_COIN);
    }

    private UsersCoin(Name alias, Table<UsersCoinRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersCoin(Name alias, Table<UsersCoinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UsersCoin(Table<O> child, ForeignKey<O, UsersCoinRecord> key) {
        super(child, key, USERS_COIN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ImoocShop.IMOOC_SHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_COIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersCoinRecord> getPrimaryKey() {
        return Keys.KEY_USERS_COIN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersCoinRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersCoinRecord>>asList(Keys.KEY_USERS_COIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersCoin as(String alias) {
        return new UsersCoin(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersCoin as(Name alias) {
        return new UsersCoin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersCoin rename(String name) {
        return new UsersCoin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersCoin rename(Name name) {
        return new UsersCoin(name, null);
    }
}
